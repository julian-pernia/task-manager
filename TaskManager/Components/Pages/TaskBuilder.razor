@using Radzen
@using Radzen.Blazor
@using TaskManager.Models
@using Status = TaskManager.Models.Status
@using Priority = TaskManager.Models.Priority
@using System.Text.Json

@attribute [StreamRendering]

@inject NavigationManager navigation
@inject NotificationService notificationService
@inject IJSRuntime javascript

@page "/task"
@page "/task/{TaskId}"
@rendermode InteractiveServer

<h3>Task Builder</h3>

<RadzenPanel>
    <RadzenLabel Component="TaskTitle" Text="Title" />
    <RadzenTextBox Name="TaskTitle" Value="@Title" />

    <RadzenLabel Component="TaskDescription" Text="Description" />
    <RadzenTextArea Name="TaskDescription" Value="@Description" />

    <RadzenLabel Component="TaskCreatedBy" Text="Created By" />
    <RadzenTextBox Name="TaskCreatedBy" Value="@CreatedBy" />

    <RadzenLabel Component="TaskPriority" Text="Priority" />
    <RadzenDropDown Name="TaskPriority" TValue="@Priority" Data="@Priorities" Value="@Priority" />

    <RadzenLabel Component="TaskStatus" Text="Status" />
    <RadzenDropDown Name="TaskStatus" TValue="@Status" Data="@Statuses" Value="@Status" />

    <RadzenButton Click="@SaveChanges">@(TaskId == null ? "Save" : "Update")</RadzenButton>
</RadzenPanel>


@code {
    readonly string TasksKeyword = "TaskManagerData";

    List<TaskTicket> Tasks = [];
    readonly IEnumerable<Status> Statuses = [Status.NotStarted, Status.InProgress, Status.Done, Status.Blocked];
    readonly IEnumerable<Priority> Priorities = [Priority.Unassigned, Priority.Low, Priority.Medium, Priority.High];

    [Parameter]
    public int? TaskId { get; set; }

    // Task Property Values
    public Priority Priority = Priority.Unassigned;
    public string Title = string.Empty;
    public string Description = string.Empty;
    public string CreatedBy = string.Empty;
    public Status Status = Status.NotStarted;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            bool hasProperty = await javascript.InvokeAsync<bool>("localStorage.hasOwnProperty", TasksKeyword);

            if (hasProperty)
            {
                var json = await javascript.InvokeAsync<string>("localStorage.getItem", TasksKeyword);
                Tasks = JsonSerializer.Deserialize<List<TaskTicket>>(json) ?? [];
            }

            if (TaskId != null && Tasks.Any(task => task.Id == TaskId))
            {
                TaskTicket existing = Tasks.First(task => task.Id == TaskId);

                Priority = existing.Priority;
                Title = existing.Title;
                Description = existing.Description;
                CreatedBy = existing.CreatedBy;
            }
        }
    }

    public bool Validate()
    {
        if (string.IsNullOrWhiteSpace(Title))
        {
            notificationService.Notify(NotificationSeverity.Warning, "Invalid Title", "Please enter a Title.", 5000);
            return false;
        }
        if (Priority == Priority.Unassigned)
        {
            notificationService.Notify(NotificationSeverity.Warning, "Invalid Priority", "Please assign a Priority.", 5000);
            return false;
        }
        return true;
    }

    public async Task SaveChanges()
    {
        try
        {
            if (!Validate())
            {
                return;
            }

            if (TaskId != null && Tasks.Any(task => task.Id == TaskId))
            {
                TaskTicket existing = Tasks.First(task => task.Id == TaskId);
                int index = Tasks.IndexOf(existing);
                Tasks[index] = new()
                {
                    Id = TaskId.Value,
                    Title = Title,
                    Description = Description,
                    Priority = Priority,
                    Status = Status,
                    CreatedBy = existing.CreatedBy,
                    CreatedOn = existing.CreatedOn
                };
            }
            else
            {
                TaskTicket added = new()
                {
                    Id = Tasks.Select(task => task.Id).DefaultIfEmpty(0).Max() + 1,
                    Title = Title,
                    Description = Description,
                    Priority = Priority,
                    Status = Status,
                    CreatedBy = CreatedBy,
                    CreatedOn = DateTime.Now
                };
                Tasks.Add(added);

                TaskId = added.Id;
            }

            var json = JsonSerializer.Serialize(Tasks);
            await javascript.InvokeVoidAsync("localStorage.setItem", TasksKeyword, json);

            notificationService.Notify(NotificationSeverity.Success, "Task Saved", $"Task \"{Title}\" has been saved successfully.");

            navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            notificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to save task. Error message: {ex.Message}");
        }

    }
}