@using TaskManager.Components.ModelAdapter
@using TaskManager.Models
@using Status = TaskManager.Models.Status
@using Priority = TaskManager.Models.Priority
@using System.Text.Json

@attribute [StreamRendering]

@inject NavigationManager navigation
@inject NotificationService notification
@inject DialogService dialog 
@inject IJSRuntime javascript

@page "/"

@rendermode InteractiveServer

<h3>Tasks</h3>

<RadzenPanel>
    <RadzenDataGrid TItem="SelectableTask" Data="Tasks" AllowColumnResize="true" GridLines="DataGridGridLines.Vertical">
        <Columns>
            <RadzenDataGridColumn Title="" Context="task" Filterable="false" Sortable="false" Width="50px">
                <Template>
                    <RadzenCheckBox TValue="bool" Value=@task.IsSelected Change="(args => UpdateSelected(args, task))" />
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Title="Task ID" Property="@nameof(SelectableTask.Id)" />

            <RadzenDataGridColumn Title="Priority" Context="task">
                <Template>
                    <RadzenDropDown Change="@(args => SetPriority((Priority)args, task))" TValue="Priority" Value=task.Priority Data=@Priorities Style="width:100%"/>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Title="Title" Property="@nameof(SelectableTask.Title)" />
            <RadzenDataGridColumn Title="Description" Property="@nameof(SelectableTask.Description)" />
            <RadzenDataGridColumn Title="Created By" Property="@nameof(SelectableTask.CreatedBy)" />
            <RadzenDataGridColumn Title="Created On" Property="@nameof(SelectableTask.CreatedOnString)" />

            <RadzenDataGridColumn Title="Status" Context="task">
                <Template>
                    <RadzenDropDown Change="@(args => SetStatus((Status)args, task))" TValue="Status" Value=task.Status Data=@Statuses Style="width:100%"/>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenButton ButtonType="@ButtonType.Button" Click="@CreateTask">Add Task</RadzenButton>
        <RadzenButton ButtonType="@ButtonType.Button" Click="@DeleteTasks">Delete Tasks</RadzenButton>
    </RadzenStack>
</RadzenPanel>


@code {
    readonly string TasksKeyword = "TaskManagerData";

    List<SelectableTask> Tasks = [];
    readonly IEnumerable<Status> Statuses = [Status.NotStarted, Status.InProgress, Status.Done, Status.Blocked];
    readonly IEnumerable<Priority> Priorities = [Priority.Low, Priority.Medium, Priority.High];

    bool AnySelected = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            bool hasProperty = await javascript.InvokeAsync<bool>("localStorage.hasOwnProperty", TasksKeyword);

            if (hasProperty)
            {
                var json = await javascript.InvokeAsync<string>("localStorage.getItem", TasksKeyword);
                List<TaskTicket> tasks = JsonSerializer.Deserialize<List<TaskTicket>>(json) ?? [];
                Tasks = SelectableTask.ConvertToSelectable(tasks);

                StateHasChanged();
            }
        }
    }

    public void UpdateSelected(bool selected, SelectableTask task)
    {
        task.IsSelected = selected;
    }

    public async Task SetPriority(Priority priority, SelectableTask task)
    {
        Tasks.Where(t => t.Id == task.Id).First().Priority = priority;
        await SaveChanges();

        notification.Notify(NotificationSeverity.Info, "Task Saved", $"Task priority has been updated.", 3000);
    }

    public async Task SetStatus(Status status, SelectableTask task)
    {
        Tasks.Where(t => t.Id == task.Id).First().Status = status;
        await SaveChanges();
        notification.Notify(NotificationSeverity.Info, "Task Saved", $"Task info has been updated.", 3000);
    }

    public async Task SaveChanges()
    {
        var json = JsonSerializer.Serialize(Tasks);
        await javascript.InvokeVoidAsync("localStorage.setItem", TasksKeyword, json);

    }

    public void CreateTask()
    {
        navigation.NavigateTo("/task");
    }

    public async Task DeleteTasks()
    {
        if (!Tasks.Any(task => task.IsSelected))
        {
            return;
        }

        bool? response = await dialog.Confirm("Are you sure you want to delete the selected task tickets? This cannot be undone.", "Delete Tasks");

        if (response.HasValue && response.Value)
        {
            Tasks.RemoveAll(task => task.IsSelected);
            Tasks = new(Tasks); // Assign new value to get datagrid to refresh

            await SaveChanges();
            notification.Notify(NotificationSeverity.Success, "Tasks Deleted", $"Tasks have been deleted.", 3000);
            StateHasChanged();
        }
    }
}